booleans: "funcky:booleans"

# Check for equality given values (x = y)
# "funcky:types".Function $_2 ("funcky:types".Function $_2 "funcky:types".Boolean)
# equal = ...

# Check if first argument is greater than second argument (x > y)
# "funcky:types".Function $_1cb ("funcky:types".Function $_1cb "funcky:types".Boolean)
greaterThan = $$ 2 (equal (compare ($ 0) ($ 1)) 1)

# Check if first argument is less than second argument (x < y)
# "funcky:types".Function $_2c3 ("funcky:types".Function $_2c3 "funcky:types".Boolean)
lessThan = $$ 2 (equal (compare ($ 0) ($ 1)) -1)

# Check if first argument is greater than or equal to second argument (x ≥ y)
# "funcky:types".Function $_39a5 ("funcky:types".Function $_39a5 "funcky:types".Boolean)
greaterEqual = $$ 2 (booleans.or (greaterThan ($ 0) ($ 1)) (equal ($ 0) ($ 1)))

# Check if first argument is less than or equal to second argument (x ≤ y)
# "funcky:types".Function $_2a32 ("funcky:types".Function $_2a32 "funcky:types".Boolean)
lessEqual = $$ 2 (booleans.or (lessThan ($ 0) ($ 1)) (equal ($ 0) ($ 1)))

# Compare given values
# "funcky:types".Function $_2 ("funcky:types".Function $_2 "funcky:types".Number)
# compare = ...

# Hash given value
# "funcky:types".Function $_3 "funcky:types".Number
# hash = ...

# Ternary conditional operator (return second value if first value is true or third value otherwise)
# "funcky:types".Function "funcky:types".Boolean ("funcky:types".Function $_7 ("funcky:types".Function $_7 $_7))
# if = ...

# Convert value to string
# "funcky:types".Function $_4 ("funcky:types".List "funcky:types".Character)
# string = ...

# Parse number from string
#   throws error if argument is not a valid representation of a number
# "funcky:types".Function ("funcky:types".List "funcky:types".Character) "funcky:types".Number
# number = ...

# Throw error with given message
#   throws error
# "funcky:types".Function ("funcky:types".List "funcky:types".Character) $_7
# error = ...

# Infinite recursion
# "funcky:types".Function $_7 $_8
# bottom = ...
