lists: "funcky:lists"

# Rounding mode incrementing away from zero.
# "funcky:types".Number
UP = 0

# Rounding mode decrementing towards zero.
# "funcky:types".Number
DOWN = 1

# Rounding mode rounding towards positive infinity.
# "funcky:types".Number
CEILING = 2

# Rounding mode rounding towards negative infinity.
# "funcky:types".Number
FLOOR = 3

# Rounding mode rounding towards nearest neighbor (UP, if equidistant)
# "funcky:types".Number
HALF_UP = 4

# Rounding mode rounding towards nearest neighbor (DOWN, if equidistant)
# "funcky:types".Number
HALF_DOWN = 5

# Rounding mode rounding towards nearest neighbor (towards even neighbor, if equidistant)
# "funcky:types".Number
HALF_EVEN = 6

# Rounding mode performing no rounding
# "funcky:types".Number
UNNECESSARY = 7

# Arithmetic unary plus (+x)
# "funcky:types".Function "funcky:types".Number "funcky:types".Number
# plus = ...

# Arithmetic unary minus (-x)
# "funcky:types".Function "funcky:types".Number "funcky:types".Number
# minus = ...

# Arithmetic rounding
#   throws error if scale is not integer
#   throws error if rounding mode is invalid (not one of UP, DOWN, CEILING, FLOOR, HALF_UP, HALF_DOWN, HALF_EVEN, UNNECESSARY)
#   throws error if scale is insufficient and rounding mode is UNNECESSARY
# "funcky:types".Function "funcky:types".Number ("funcky:types".Function "funcky:types".Number ("funcky:types".Function "funcky:types".Number "funcky:types".Number))
round = $$ 3 (divide ($ 0) 1 ($ 1) ($ 2))

# Arithmetic addition (x + y)
# "funcky:types".Function "funcky:types".Number ("funcky:types".Function "funcky:types".Number "funcky:types".Number)
# add = ...

# Arithmetic subtraction (x - y)
# "funcky:types".Function "funcky:types".Number ("funcky:types".Function "funcky:types".Number "funcky:types".Number)
# subtract = ...

# Arithmetic multiplication (x * y)
# "funcky:types".Function "funcky:types".Number ("funcky:types".Function "funcky:types".Number "funcky:types".Number)
# multiply = ...

# Arithmetic division (x / y)
#   throws error if divisor is zero
#   throws error if scale is not integer
#   throws error if rounding mode is invalid (not one of UP, DOWN, CEILING, FLOOR, HALF_UP, HALF_DOWN, HALF_EVEN, UNNECESSARY)
#   throws error if scale is insufficient and rounding mode is UNNECESSARY
# "funcky:types".Function "funcky:types".Number ("funcky:types".Function "funcky:types".Number ("funcky:types".Function "funcky:types".Number ("funcky:types".Function "funcky:types".Number "funcky:types".Number)))
# divide = ...

# Arithmetic modulo (x - y * ⌊x/y⌋)
#   throws error if divisor is zero
# "funcky:types".Function "funcky:types".Number ("funcky:types".Function "funcky:types".Number "funcky:types".Number)
modulo = $$ 2 (subtract ($ 0) (multiply (divide ($ 0) ($ 1) 0 FLOOR) ($ 1)))

# Convert value to byte (8-bit signed integer)
# "funcky:types".Function "funcky:types".Number "funcky:types".Number
# byte = ...

# Convert value to short (16-bit signed integer)
# "funcky:types".Function "funcky:types".Number "funcky:types".Number
# short = ...

# Convert value to int (32-bit signed integer)
# "funcky:types".Function "funcky:types".Number "funcky:types".Number
# int = ...

# Convert value to long (64-bit signed integer)
# "funcky:types".Function "funcky:types".Number "funcky:types".Number
# long = ...

# Convert value to float (32-bit IEEE 754 floating point number)
# "funcky:types".Function "funcky:types".Number "funcky:types".Number
# float = ...

# Convert value to double (64-bit IEEE 754 floating point number)
# "funcky:types".Function "funcky:types".Number "funcky:types".Number
# double = ...

# Arithmetic summation (Σ)
# "funcky:types".Function ("funcky:types".List "funcky:types".Number) "funcky:types".Number
sum = $$ 1 (lists.reduce ($ 0) add 0)

# Αrithmetic product (Π)
# "funcky:types".Function ("funcky:types".List "funcky:types".Number) "funcky:types".Number
product = $$ 1 (lists.reduce ($ 0) multiply 1)
